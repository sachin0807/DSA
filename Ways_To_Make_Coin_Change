
public class Solution {

	public static long countWaysToMakeChange(int nums[], int x){
       int n=nums.length;
        long[][] dp=new long[n][x+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=x;j++){
                dp[i][j]=-1;
            }
        }
        return fun(0,n,x,nums,dp);	
	}
	public static long fun(int i,int n,int k,int[] nums,long[][] dp){
        if(i==n){
			if(k==0)return 1;
			return 0;
        }
        if(dp[i][k]!=-1)return dp[i][k];
        long take=0;
        if(nums[i]<=k){
            take=fun(i,n,k-nums[i],nums,dp);
        }
        long notTake=fun(i+1,n,k,nums,dp);
        return dp[i][k]=(take+notTake);
    }

	
}
