public class Solution {
	public static boolean wildcardMatching(String pattern, String text) {
		int n=text.length();
		int m=pattern.length();
		int[][] dp=new int[n][m];
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				dp[i][j]=-1;
			}
		}
		int ans=fun(0,0,n,m,text,pattern,dp);
		if(ans==1)return true;
		return false;
	}
	public static int fun(int i,int j,int n,int m,String text,String pattern,int[][] dp){
		if(i==n || j==m){
			if(i==n){
				while(j<m && pattern.charAt(j)=='*')j++;
			}
			if(i==n && j==m)return 1;
			return 0;
		}
		if(dp[i][j]!=-1)return dp[i][j];
		if(text.charAt(i)==pattern.charAt(j) || pattern.charAt(j)=='?'){
			return dp[i][j]=fun(i+1,j+1,n,m,text,pattern,dp);
		}
		else if(pattern.charAt(j)=='*'){
			int ans=0;
			for(int k=i;k<=n;k++){
				ans=fun(k,j+1,n,m,text,pattern,dp);
				if(ans==1)return dp[i][j]=1;
			}
		}
		return dp[i][j]=0;
	}

}
