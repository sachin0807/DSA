public class Solution {
    public static int minSubsetSumDifference(int []arr, int n) {
        int totSum = 0;

        for (int i = 0; i < n; i++) {
            totSum += arr[i];
        }
        boolean[][] dp = new boolean[n][totSum + 1];

        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }

        if (arr[0] <= totSum) {
            dp[0][totSum] = true;
        }

        for (int i = 1; i < n; i++) {
            for (int target = 1; target <= totSum; target++) {
                boolean notTake = dp[i - 1][target];
                boolean take = false;
                if (arr[i] <= target) {
                    take = dp[i - 1][target - arr[i]];
                }

                dp[i][target] = notTake || take;
            }
        }

        int mini = Integer.MAX_VALUE;

        for (int i = 0; i <= totSum; i++) {
            if (dp[n - 1][i]) {
                int diff = Math.abs(i - (totSum - i));
                mini = Math.min(mini, diff);
            }
        }
        return mini;
    }
}
