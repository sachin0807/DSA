public class Solution {
	public static boolean canPartition(int[] arr, int n) {
		int sum=0;
		for(int i=0;i<n;i++){
			sum+=arr[i];
		}
		if(sum%2!=0)return false;
		sum/=2;
		int[][] dp=new int[n][sum+1];
		for(int i=0;i<n;i++){
			for(int j=0;j<=sum;j++){
				dp[i][j]=-1;
			}
		}
		if(fun(0,n,sum,arr,dp)==1)return true;
		return false;
	}
	public static int fun(int i,int n,int sum,int[] arr,int[][] dp){
		if(i==n){
			if(sum==0)return 1;
			else return 0;
		}
		if(sum==0)return 1;
		if(dp[i][sum]!=-1)return dp[i][sum];
		int first=fun(i+1,n,sum,arr,dp);
		if(first==1)return dp[i][sum]=1;
		int second=0;
		if(sum>=arr[i]){
			second=fun(i+1,n,sum-arr[i],arr,dp);
		}
		if(second==1)return dp[i][sum]=1;
		return dp[i][sum]=0;
	}
}
