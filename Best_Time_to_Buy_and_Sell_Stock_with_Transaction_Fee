public class Solution {
    public static int maximumProfit(int[] prices, int n, int fee) {
        int[][] dp=new int[n][2];
        for(int i=0;i<n;i++){
            for(int j=0;j<2;j++){
                dp[i][j]=-1;
            }
        }
        return fun(0,n,0,fee,prices,dp);
    }
    public static int fun(int i,int n,int buy,int fee,int[] prices,int[][] dp){
        if(i>=n){
            if(buy%2==0)return 0;
            else return -1000000000;
        }
        if(dp[i][buy]!=-1)return dp[i][buy];
        if(buy%2==0){
            return dp[i][buy]=Math.max(fun(i+1,n,buy,fee,prices,dp),-prices[i]+fun(i+1,n,1,fee,prices,dp));
        }
        return dp[i][buy]=Math.max(fun(i+1,n,buy,fee,prices,dp),(prices[i]-fee)+fun(i+1,n,0,fee,prices,dp));
    }
}
