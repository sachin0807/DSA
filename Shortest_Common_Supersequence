import java.util.* ;
import java.io.*; 
public class Solution {
    public static String shortestSupersequence(String a, String b) {
        int n=a.length();
        int m=b.length();
        int[][] dp=new int[n+1][m+1];
        for(int i=1;i<=n;i++){
            if(b.charAt(0)==a.charAt(i-1)){
                dp[i][1]=1;
            }
            else{
                dp[i][1]=dp[i-1][1];
            }
        }
        for(int i=1;i<=m;i++){
            if(a.charAt(0)==b.charAt(i-1)){
                dp[1][i]=1;
            }
            else{
                dp[1][i]=dp[1][i-1];
            }
        }
        for(int i=2;i<=n;i++){
            for(int j=2;j<=m;j++){
                if(a.charAt(i-1)==b.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        ArrayList<Character> al=new ArrayList<>();
        int i=n;
        int j=m;

        while(i>0 && j>0){
            if(a.charAt(i-1)==b.charAt(j-1)){
                al.add(a.charAt(i-1));
                i--;
                j--;
            }
            else if(dp[i-1][j]>dp[i][j-1]){
                al.add(a.charAt(i-1));
                i--;
            }
            else{
                al.add(b.charAt(j-1));
                j--;
            }
        }
        while(i>0){
            al.add(a.charAt(i-1));
            i--;
        }
        while(j>0){
            al.add(b.charAt(j-1));
            j--;
        }
        StringBuilder sb=new StringBuilder("");
        i=al.size()-1;
        while(i>=0){
            sb.append(al.get(i));
            i--;
        }
        String lcs=sb.toString();
        return lcs;
    }

}
