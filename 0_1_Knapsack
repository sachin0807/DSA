import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

            int[][] dp=new int[n][maxWeight+1];
            for(int i=0;i<n;i++){
                for(int j=0;j<=maxWeight;j++){
                    dp[i][j]=-1;
                }
            }
            return fun(0,n,maxWeight,weight,value,dp);
    }
    public static int fun(int i,int n,int maxWeight,int[] weight,int[] value,int[][] dp){
        if(i==n){
            return 0;
        }
        if(dp[i][maxWeight]!=-1)return dp[i][maxWeight];
        int pick=0;
        if(maxWeight>=weight[i]){
            pick=value[i]+fun(i+1,n,maxWeight-weight[i],weight,value,dp);
        }
        int notPick=fun(i+1,n,maxWeight,weight,value,dp);
        return dp[i][maxWeight]=Math.max(pick,notPick);
    }
}
