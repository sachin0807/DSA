public class Solution {
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        int[][] dp=new int[n][w+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=w;j++){
                dp[i][j]=-1;
            }
        }
        return fun(0,n,w,profit,weight,dp);
    }
    public static int fun(int i,int n,int w,int[] profit,int[] weight,int[][] dp){
        if(w==0 || i==n){
            return 0;
        }
        if(dp[i][w]!=-1)return dp[i][w];
        int take=0;
        if(w>=weight[i]){
            take=profit[i]+fun(i,n,w-weight[i],profit,weight,dp);
        }
        int notTake=fun(i+1,n,w,profit,weight,dp);
        return dp[i][w]=Math.max(take,notTake);
    }
}
